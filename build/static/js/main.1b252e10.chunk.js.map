{"version":3,"sources":["components/Chart.js","components/MenuBar.js","App.js","serviceWorker.js","index.js","components/logo512.png"],"names":["Chart","props","state","chartData","className","data","this","height","width","options","responsive","maintainAspectRatio","title","display","displayTitle","text","fontSize","fontColor","legend","displayLegend","position","legendPosition","layout","padding","top","left","right","bottom","Component","defaultProps","MenuBar","src","logo","alt","App","chartData1","chartData2","chartData3","chartData4","chartData5","setState","labels","datasets","label","fill","borderColor","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"iNAGMA,E,YACJ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,UAAUF,EAAME,WAHF,E,sEAiBhB,OACE,yBAAKC,UAAU,SACb,kBAAC,IAAD,CACEC,KAAMC,KAAKJ,MAAMC,UACjBI,OAAQ,IACRC,MAAO,GACPC,QAAS,CACPC,YAAY,EACZC,qBAAqB,EACrBC,MAAM,CACJC,QAAQP,KAAKL,MAAMa,aACnBC,KAAMT,KAAKL,MAAMW,MACjBI,SAAS,GACTC,UAAW,WAEbC,OAAO,CACLL,QAAQP,KAAKL,MAAMkB,cACnBC,SAASd,KAAKL,MAAMoB,gBAEtBC,OAAQ,CACNC,QAAS,CACLC,IAAK,EACLC,KAAM,GACNC,MAAO,GACPC,OAAQ,a,GA1CNC,aAAd5B,EAWG6B,aAAe,CACpBf,cAAa,EACbK,eAAe,EACfE,eAAe,SAsCJrB,Q,iBCzCA8B,E,iLATP,OACI,yBAAK1B,UAAU,cACX,yBAAK2B,IAAKC,IAAM5B,UAAU,WAAW6B,IAAI,OAAOzB,MAAM,OAAOD,OAAQ,SACrE,wBAAIH,UAAU,aAAd,mB,GALMwB,aC4HPM,E,YAzHb,aAAc,IAAD,8BACX,+CACKhC,MAAQ,CACXiC,WAAW,GACXC,WAAW,GACXC,WAAW,GACXC,WAAW,GACXC,WAAW,IAPF,E,kFAaXjC,KAAKkC,SAAS,CACZL,WAAW,CACTM,OAAQ,CAAC,qBACTC,SAAS,CACP,CACEC,MAAM,0BACNtC,KAAK,CACH,EACA,EACA,GAEFuC,MAAM,EACNC,YAAa,UACbC,gBAAgB,CACd,qBAKRV,WAAW,CACTK,OAAQ,CAAC,qBACTC,SAAS,CACP,CACEC,MAAM,6BACNtC,KAAK,CACH,EACA,EACA,GAEFuC,MAAM,EACNC,YAAa,UACbC,gBAAgB,CACd,qBAKRT,WAAW,CACTI,OAAQ,CAAC,qBACTC,SAAS,CACP,CACEC,MAAM,iCACNtC,KAAK,CACH,EACA,EACA,GAEFuC,MAAM,EACNC,YAAa,UACbC,gBAAgB,CACd,qBAKRR,WAAW,CACTG,OAAQ,CAAC,qBACTC,SAAS,CACP,CACEC,MAAM,cACNtC,KAAK,CACH,EACA,EACA,GAEFuC,MAAM,EACNC,YAAa,UACbC,gBAAgB,CACd,qBAKRP,WAAW,CACTE,OAAQ,CAAC,qBACTC,SAAS,CACP,CACEC,MAAM,QACNtC,KAAK,CACH,EACA,EACA,GAEFuC,MAAM,EACNC,YAAa,UACbC,gBAAgB,CACd,yB,+BASV,OACE,yBAAK1C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOD,UAAWG,KAAKJ,MAAMiC,WAAYvB,MAAM,4BAC/C,kBAAC,EAAD,CAAOT,UAAWG,KAAKJ,MAAMkC,WAAYxB,MAAM,+BAC/C,kBAAC,EAAD,CAAOT,UAAWG,KAAKJ,MAAMmC,WAAYzB,MAAM,mCAC/C,kBAAC,EAAD,CAAOT,UAAWG,KAAKJ,MAAMoC,WAAY1B,MAAM,gBAC/C,kBAAC,EAAD,CAAOT,UAAWG,KAAKJ,MAAMqC,WAAY3B,MAAM,e,GApHrCgB,aCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.1b252e10.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Line} from 'react-chartjs-2';\n\nclass Chart extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      chartData:props.chartData\n    }\n  }\n\n  // 'defaultProps define uma propriedade padrao\n  // caso nao seja especificado nenhuma quando passado\n  // e será sobreescrito caso algum seja passado\n  static defaultProps = {\n    displayTitle:true,\n    displayLegend: true,\n    legendPosition:'right'\n  }\n\n  render(){\n    return (\n      <div className=\"chart\">\n        <Line\n          data={this.state.chartData}\n          height={400}\n          width={10}\n          options={{\n            responsive: true,\n            maintainAspectRatio: false,\n            title:{\n              display:this.props.displayTitle,\n              text: this.props.title,\n              fontSize:25,\n              fontColor: \"#ac0000\"\n            },\n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            },\n            layout: {\n              padding: {\n                  top: 5,\n                  left: 15,\n                  right: 15,\n                  bottom: 15\n              }\n          }\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Chart;","import React, {Component} from 'react';\r\nimport logo from './logo512.png';\r\n\r\nclass MenuBar extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"50px\" height= \"50px\" />\r\n                <h3 className=\"mainTitle\">How2usleep</h3>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MenuBar","import React, { Component } from 'react';\nimport './App.css';\nimport Chart from './components/Chart';\nimport MenuBar from './components/MenuBar';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      chartData1:{},    // Batimentos Cardiacos\n      chartData2:{},    // Esforco Respiratorio\n      chartData3:{},    // Saturacao de Oxigenio\n      chartData4:{},    // Fluxo Nasal\n      chartData5:{}     // Ronco\n    }\n  }\n\n  componentWillMount(){\n    // Ajax calls here\n    this.setState({\n      chartData1:{\n        labels: ['Unidade de Medida'],\n        datasets:[\n          {\n            label:'Batimentos Cardíacos',\n            data:[\n              1,\n              2,\n              3,\n            ],\n            fill: false,\n            borderColor: \"#ac0000\",\n            backgroundColor:[\n              'rgb(172, 0, 0)'\n            ]\n          }\n        ]\n      },\n      chartData2:{\n        labels: ['Unidade de Medida'],\n        datasets:[\n          {\n            label:'Esforço Respiratório',\n            data:[\n              1,\n              2,\n              3,\n            ],\n            fill: false,\n            borderColor: \"#ac0000\",\n            backgroundColor:[\n              'rgb(172, 0, 0)'\n            ]\n          }\n        ]\n      },\n      chartData3:{\n        labels: ['Unidade de Medida'],\n        datasets:[\n          {\n            label:'Saturação de Oxigênio',\n            data:[\n              1,\n              2,\n              3,\n            ],\n            fill: false,\n            borderColor: \"#ac0000\",\n            backgroundColor:[\n              'rgb(172, 0, 0)'\n            ]\n          }\n        ]\n      },\n      chartData4:{\n        labels: ['Unidade de Medida'],\n        datasets:[\n          {\n            label:'Fluxo Nasal',\n            data:[\n              1,\n              2,\n              3,\n            ],\n            fill: false,\n            borderColor: \"#ac0000\",\n            backgroundColor:[\n              'rgb(172, 0, 0)'\n            ]\n          }\n        ]\n      },\n      chartData5:{\n        labels: ['Unidade de Medida'],\n        datasets:[\n          {\n            label:'Ronco',\n            data:[\n              1,\n              2,\n              3,\n            ],\n            fill: false,\n            borderColor: \"#ac0000\",\n            backgroundColor:[\n              'rgb(172, 0, 0)'\n            ]\n          }\n        ]\n      },\n    });\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <MenuBar />\n        <Chart chartData={this.state.chartData1} title=\"Batimentos Cardíacos\"  />\n        <Chart chartData={this.state.chartData2} title=\"Esforço Respiratório\"   />\n        <Chart chartData={this.state.chartData3} title=\"Saturação de Oxigênio\" />\n        <Chart chartData={this.state.chartData4} title=\"Fluxo Nasal\"  />\n        <Chart chartData={this.state.chartData5} title=\"Ronco\"  />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo512.df180eb6.png\";"],"sourceRoot":""}