{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js","logo512.png"],"names":["Chart","props","state","chartData","className","data","this","options","title","display","displayTitle","text","location","fontSize","legend","displayLegend","position","legendPosition","Component","defaultProps","App","setState","labels","datasets","label","backgroundColor","src","logo","alt","width","height","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"uOAGMA,E,YACJ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,UAAUF,EAAME,WAHF,E,sEAkBhB,OACE,yBAAKC,UAAU,SACb,kBAAC,IAAD,CACEC,KAAMC,KAAKJ,MAAMC,UACjBI,QAAS,CACPC,MAAM,CACJC,QAAQH,KAAKL,MAAMS,aACnBC,KAAK,qBAAuBL,KAAKL,MAAMW,SACvCC,SAAS,IAEXC,OAAO,CACLL,QAAQH,KAAKL,MAAMc,cACnBC,SAASV,KAAKL,MAAMgB,mBAK1B,kBAAC,IAAD,CACEZ,KAAMC,KAAKJ,MAAMC,UACjBI,QAAS,CACPC,MAAM,CACJC,QAAQH,KAAKL,MAAMS,aACnBC,KAAK,qBAAqBL,KAAKL,MAAMW,SACrCC,SAAS,IAEXC,OAAO,CACLL,QAAQH,KAAKL,MAAMc,cACnBC,SAASV,KAAKL,MAAMgB,mBAK1B,kBAAC,IAAD,CACEZ,KAAMC,KAAKJ,MAAMC,UACjBI,QAAS,CACPC,MAAM,CACJC,QAAQH,KAAKL,MAAMS,aACnBC,KAAK,qBAAqBL,KAAKL,MAAMW,SACrCC,SAAS,IAEXC,OAAO,CACLL,QAAQH,KAAKL,MAAMc,cACnBC,SAASV,KAAKL,MAAMgB,wB,GA7DdC,aAAdlB,EAWGmB,aAAe,CACpBT,cAAa,EACbK,eAAe,EACfE,eAAe,QACfL,SAAS,QAuDEZ,QChBAoB,E,YAnDb,aAAc,IAAD,8BACX,+CACKlB,MAAQ,CACXC,UAAU,IAHD,E,kFASXG,KAAKe,SAAS,CACZlB,UAAU,CACRmB,OAAQ,CAAC,SAAU,YAAa,cAAe,SAAU,YAAa,eACtEC,SAAS,CACP,CACEC,MAAM,aACNnB,KAAK,CACH,OACA,OACA,OACA,OACA,OACA,OAEFoB,gBAAgB,CACd,0BACA,0BACA,0BACA,0BACA,2BACA,0BACA,kC,+BASV,OACE,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKsB,IAAKC,IAAMvB,UAAU,WAAWwB,IAAI,OAAOC,MAAM,OAAOC,OAAQ,SACrE,wBAAI1B,UAAU,aAAd,eAEF,kBAAC,EAAD,CAAOD,UAAWG,KAAKJ,MAAMC,UAAWS,SAAS,gBAAgBK,eAAe,gB,GA9CtEC,aCOEa,QACW,cAA7BC,OAAOpB,SAASqB,UAEe,UAA7BD,OAAOpB,SAASqB,UAEhBD,OAAOpB,SAASqB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.22056b6f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Bar, Line, Pie} from 'react-chartjs-2';\n\nclass Chart extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      chartData:props.chartData\n    }\n  }\n\n  // 'defaultProps define uma propriedade padrao\n  // caso nao seja especificado nenhuma quando passado\n  // e ser√° sobreescrito caso algum seja passado\n  static defaultProps = {\n    displayTitle:true,\n    displayLegend: true,\n    legendPosition:'right',\n    location:'City'\n  }\n\n  render(){\n    return (\n      <div className=\"chart\">\n        <Bar\n          data={this.state.chartData}\n          options={{\n            title:{\n              display:this.props.displayTitle,\n              text:'Largest Cities In '+  this.props.location,\n              fontSize:25\n            },\n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            }\n          }}\n        />\n\n        <Line\n          data={this.state.chartData}\n          options={{\n            title:{\n              display:this.props.displayTitle,\n              text:'Largest Cities In '+this.props.location,\n              fontSize:25\n            },\n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            }\n          }}\n        />\n\n        <Pie\n          data={this.state.chartData}\n          options={{\n            title:{\n              display:this.props.displayTitle,\n              text:'Largest Cities In '+this.props.location,\n              fontSize:25\n            },\n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            }\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Chart;","import React, { Component } from 'react';\nimport logo from './logo512.png';\nimport './App.css';\nimport Chart from './components/Chart';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      chartData:{}\n    }\n  }\n\n  componentWillMount(){\n    // Ajax calls here\n    this.setState({\n      chartData:{\n        labels: ['Boston', 'Worcester', 'Springfield', 'Lowell', 'Cambridge', 'New Bedford'],\n        datasets:[\n          {\n            label:'Population',\n            data:[\n              617594,\n              181045,\n              153060,\n              106519,\n              105162,\n              95072\n            ],\n            backgroundColor:[\n              'rgba(255, 99, 132, 0.6)',\n              'rgba(54, 162, 235, 0.6)',\n              'rgba(255, 206, 86, 0.6)',\n              'rgba(75, 192, 192, 0.6)',\n              'rgba(153, 102, 255, 0.6)',\n              'rgba(255, 159, 64, 0.6)',\n              'rgba(255, 99, 132, 0.6)'\n            ]\n          }\n        ]\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"50px\" height= \"50px\" />\n          <h3 className=\"mainTitle\">How2usleep</h3>\n        </div>\n        <Chart chartData={this.state.chartData} location=\"Massachusetts\" legendPosition=\"bottom\"/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// import React from 'react';\n// import {Bar} from 'react-chartjs-2';\n// import GraficoBarra from './components/GraficoBarra'\n// import GraficoLinha from './components/GraficoLinha'\n// import Chart from './components/Chart'\n\n// class App extends React.Component {\n//   render() {\n//     return (\n//       // <div>\n//       //   <GraficoBarra />\n//       // </div> \n//       <div>\n//         <GraficoLinha name=\"Batimentos\"/>\n//         <GraficoLinha name=\"Ronco\"/>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App\n\n\n  // getChartData(){\n  //   // Ajax calls here\n  //   this.setState({\n  //     chartData:{\n  //       labels: ['Boston', 'Worcester', 'Springfield', 'Lowell', 'Cambridge', 'New Bedford'],\n  //       datasets:[\n  //         {\n  //           label:'Population',\n  //           data:[\n  //             617594,\n  //             181045,\n  //             153060,\n  //             106519,\n  //             105162,\n  //             95072\n  //           ],\n  //           backgroundColor:[\n  //             'rgba(255, 99, 132, 0.6)',\n  //             'rgba(54, 162, 235, 0.6)',\n  //             'rgba(255, 206, 86, 0.6)',\n  //             'rgba(75, 192, 192, 0.6)',\n  //             'rgba(153, 102, 255, 0.6)',\n  //             'rgba(255, 159, 64, 0.6)',\n  //             'rgba(255, 99, 132, 0.6)'\n  //           ]\n  //         }\n  //       ]\n  //     }\n  //   });\n  // }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo512.df180eb6.png\";"],"sourceRoot":""}